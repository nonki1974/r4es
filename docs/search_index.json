[["ggplot2によるデータの可視化1.html", "6 ggplot2によるデータの可視化（1） ", " 6 ggplot2によるデータの可視化（1） "],["about-ggplot2.html", "6.1 ggplot2パッケージについて", " 6.1 ggplot2パッケージについて ggplot2パッケージは、Wilkinson(2005)による“Grammar of Graphics”の理論に基づいてデータを可視化する機能を提供します。パッケージの開発者はdplyrパッケージと同じHadley Wickhamです。ggplot2は、可視化のための一貫した文法を提供するだけでなく、グラフの出力が洗練されていることから、多くの支持を集めています。 ggplot2はtidyverseに含まれているので、tidyverseが利用可能な状態であればggplot2の関数は利用できます。このテキストでは、ggplot2の2020年10月時点での最新版3.2.2の利用を前提に説明します。 "],["basics-ggplot2.html", "6.2 ggplot2における可視化の基本", " 6.2 ggplot2における可視化の基本 Rの標準機能で提供されるplot()関数では、引数に描画したいデータが含まれるベクトルを指定します。一方、ggplot2においては、描画したいデータが含まれるデータフレームを指定するのが基本です。その上で、描画したいグラフの種類（geoms）と、グラフの描画要素（aesthetics）にデータフレーム内のどの変数を割り当てるかを記述します。ここでは、ggplot2に含まれるmpgデータを用いて説明します。mpgデータには1999年から2008年の間に毎年新しい車種を発売している主要な38のモデルについて、1999年と2008年の燃費などの値が記録されています。以下のコマンドにより、一般の道路における燃費ctyと高速道路における燃費hwy（単位はいずれもmiles per gallon）の散布図を描画できます。 ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() まず、ggplot()関数のdata引数にデータフレームを指定し、mapping引数に、aes()関数を用いて、aestheticsへの対応を記述します。ただ、これだけでは、グラフは描画されません。ggplot()関数は、グラフの基本情報を設定するための関数と考えればよいでしょう。この情報にgeomsの情報を+演算子によって加えることで、実際にグラフが描画されます。ggplot2では、このように、グラフに対して新たな情報や機能を付加する場合、具体的には レイヤー（プロットやラベルや見出し）を追加 設定（グラフ全体のスタイルなど）を追加 座標系の変更 層別プロット（facet）の作成 をしたい場合に、+演算子でコマンドを接続するというスタイルをとっています。geom_point()関数は、aesで指定したxとyの各要素の組を平面上の点としてプロットするという命令です（つまり散布図を描画）。上のコマンドは、引数名を省略して記述すると以下のようになります。 ggplot(mpg, aes(cty, hwy)) + geom_point() aes()関数の第1、第2引数はそれぞれxとyとの対応となっていますが、それ以降の引数に、描画要素の大きさ（size）や色（color）などへの対応を記述することができます。また、aestheticsはgeomsの方で記述することもできます。以下のようにすれば、classごとに色分けされた散布図が描画されます。 p &lt;- ggplot(mpg, aes(cty, hwy)) p + geom_point(aes(color = class)) また、size = displとすれば、排気量（displ）の値に応じた大きさで散布図の点がプロットされます。 p + geom_point(aes(size = displ)) geom_point()関数はグラフィックスとして点を追加するための関数ですが、これ以外にも geom_bar()：棒グラフ geom_boxplot()：箱ひげ図 geom_histogram()：ヒストグラム geom_line()：折れ線グラフ などの関数が用意されています。使い方については、以降のセクションで説明していきます。 "],["ggplot-barplot.html", "6.3 棒グラフ", " 6.3 棒グラフ ggplot2で棒グラフを作成するにはgeom_bar()関数を使います。棒グラフは、質的変数に対する頻度や比例尺度での集計値を示すグラフです。標準では、aesとして1つの質的変数のみを指定します。例えば、mpgデータでclassごとの度数を棒グラフにしたい場合は次のようにします。 ggplot(mpg, aes(x = class)) + geom_bar() 散布図の場合は、xとyに指定された変数の値がそのままプロットされましたが、棒グラフの場合は、指定した質的変数（class）の度数を集計してからプロットするという流れになっています。これは、ggplot2のグラフ描画関数に連動する統計変換（Statistical Transformation）が実行される仕組みになっているためです。棒グラフの場合は度数の計算（count）ですが、ヒストグラムの場合は階級ごとの度数（bin）、箱ひげ図の場合は分位点（boxplotというように、標準での統計処理が定められています。これらは標準設定であり、データの与えられ方によっては変更すべき場合があります。例えば、以下のように、度数がすでに計算されており、個人ごとのデータがないような場合には、統計変換をしない（identity）設定にして、aesのxとyにそれぞれ、質的変数と度数を与えることによって棒グラフを描画することができます1。 fwu &lt;- data.frame( dept = c(&quot;国際教養学科&quot;, &quot;環境科学科&quot;, &quot;食・健康学科&quot;), students = c(605, 283, 148) ) fwu ## dept students ## 1 国際教養学科 605 ## 2 環境科学科 283 ## 3 食・健康学科 148 ggplot(fwu, aes(dept, students)) + geom_bar(stat = &quot;identity&quot;) geom_bar()でstat = \"identity\"とする代わりに、geom_col()を用いて、 ggplot(fwu, aes(dept, students)) + geom_col() とすることもできます。例えば、構成比率を棒グラフにしたい場合は、以下のようにするとよいでしょう。 mpg %&gt;% group_by(class) %&gt;% summarise(n = n(), .groups = &quot;drop&quot;) %&gt;% mutate(prop = n / sum(n)) %&gt;% ggplot() + geom_col(aes(class, prop)) 6.3.1 帯グラフと集合縦棒グラフ geom_bar()関数では、position引数を使うことによって、集合縦棒グラフ（position = \"dodge\"）や帯グラフ（position = fill）を描画することができます。この場合、aesのfillに塗り分けたい（層別したい）質的変数を指定します。例えば集合縦棒グラフの場合は以下のようにします。 ggplot(mpg, aes(class, fill = drv)) + geom_bar(position = &quot;dodge&quot;) また、帯グラフの場合は以下のようになります。 ggplot(mpg, aes(class, fill = drv)) + geom_bar(position = &quot;fill&quot;) geom_bar()関数におけるposition引数のデフォルト設定はstackであり、positionを指定せずにaesのfillを指定すると以下のように、積み上げ縦棒グラフが描画されます。 ggplot(mpg, aes(class, fill = drv)) + geom_bar() 6.3.2 カテゴリ（因子型の水準）の並べ替え geom_bar()関数は、x軸の質的変数を因子型に設定されたカテゴリの順番で描画します。その変数が名義尺度の場合は、頻度の順番で並べ替えた方がいいです。これを簡単に行うには、forcatsパッケージ（これもtidyverseに含まれています）を使います。例えば、mpgでclassの頻度順に因子型の水準の順番を並べ替えるにはfct_infreq()関数を以下のように適用します。 ggplot(mpg, aes(fct_infreq(class))) + geom_bar() 一方、頻度を集計した後のfwuデータでは、因子型の水準を集計された別の変数（ここではstudents）の順番で並べ替えるようにします。この場合は、fct_reorder()関数を以下のように適用します。 ggplot(fwu, aes(fct_reorder(dept, -students), students)) + geom_bar(stat = &quot;identity&quot;) -studentsとなっているのは、fct_reorder()関数が昇順で並べ替えるため、studentsの符号を反転したものを昇順に並べ替えることで、studentsを降順で並べ替えるようにしているからです。 散布図を描画するgeom_point()の標準の統計変換はidentityとなっています。 "],["ggplot-hist-box.html", "6.4 ヒストグラムと箱ひげ図", " 6.4 ヒストグラムと箱ひげ図 1つの量的変数の分布をみる場合はヒストグラムを使います。ggplot2では、geom_hist()関数を用います。mpgデータで高速道路の燃費hwyの分布をみる場合は以下のようにします。 ggplot(mpg, aes(hwy)) + geom_histogram(binwidth = 2) binwidthは階級幅になります。指定しない場合は自動で設定されますが、警告表示が出力されます。 質的変数のカテゴリごとの量的変数の分布を見たい場合は、箱ひげ図を使います。ggplot2では、geom_boxplot()関数を使います。mpgデータで、classごとのhwyの分布をみる場合は以下のようにします。 ggplot(mpg, aes(class, hwy)) + geom_boxplot() "],["ggplot-line.html", "6.5 折れ線グラフ", " 6.5 折れ線グラフ 折れ線グラフは経過時間に伴って変化する量的変数を示すグラフです。ここでは、3つのパターンについて紹介します。 6.5.1 x軸が経過時間、y軸が1つの変数 この場合が折れ線グラフの基本となります。折れ線グラフはgeom_line()関数で描画します。 df_time &lt;- data.frame(t = 1:10, y = rnorm(10)) df_time ## t y ## 1 1 0.49468061 ## 2 2 1.28472004 ## 3 3 -0.35426812 ## 4 4 0.41833406 ## 5 5 -0.34806792 ## 6 6 -0.07437318 ## 7 7 -1.74297669 ## 8 8 1.62838606 ## 9 9 -1.00620293 ## 10 10 -1.05195365 ggplot(df_time, aes(t, y)) + geom_line() flightsデータの場合に、月ごとの平均遅延時間をプロットするには以下のようにします。 flights %&gt;% filter(!is.na(arr_delay)) %&gt;% group_by(month) %&gt;% summarise(arr_delay = mean(arr_delay), .group = &quot;drop&quot;) %&gt;% ggplot(aes(month, arr_delay)) + geom_line() + scale_x_continuous(breaks = 1:12) ## `summarise()` ungrouping output (override with `.groups` argument) 最終行のscale_x_continuous()は、x軸の目盛りを設定するためのものです。 6.5.2 x軸が経過時間、y軸が2つ以上の変数 2つ以上の量的変数の時間推移を見たい場合は、geom_line()のaesにおいてgroupを指定します。 df_time &lt;- df_time %&gt;% mutate(z = rnorm(10)) df_time ## t y z ## 1 1 0.49468061 2.60548819 ## 2 2 1.28472004 0.17109088 ## 3 3 -0.35426812 0.41795061 ## 4 4 0.41833406 1.51972552 ## 5 5 -0.34806792 0.95983247 ## 6 6 -0.07437318 -0.84773856 ## 7 7 -1.74297669 -0.01607274 ## 8 8 1.62838606 0.76677649 ## 9 9 -1.00620293 2.52688594 ## 10 10 -1.05195365 0.10443449 変数が異なる列に格納されている（横長データ）の場合、一旦縦長に変形して、列名となっていた変数をgroupに指定します。 df_time %&gt;% pivot_longer(-t, names_to = &quot;var&quot;, values_to =&quot;value&quot;) %&gt;% ggplot(aes(t, value, group = var, color = var)) + geom_line() 6.5.3 x軸が日付、y軸が2つ以上の変数 以上の例は、x軸は単なる数値でしたが、時間変化のデータの場合、日付であることも多いです。例として以下のようなデータを考えます。 fuk_temp &lt;- read.csv(&quot;./data/fukuoka_temp.csv&quot;, encoding = &quot;UTF-8&quot;) head(fuk_temp) ## 年月 平均気温 日最高気温の平均 日最低気温の平均 ## 1 2010/1/1 6.6 10.3 3.3 ## 2 2010/2/1 9.4 13.1 6.0 ## 3 2010/3/1 10.9 14.3 7.6 ## 4 2010/4/1 13.8 18.1 10.3 ## 5 2010/5/1 19.2 23.6 15.6 ## 6 2010/6/1 23.5 27.6 20.7 年月列に文字列として2010/1/1のような形式で日付の情報が格納されています。このままだと、文字列なので正常に折れ線グラフが描画されません。文字列を日付としてのデータ型に変換する場合は、lubridateパッケージのas_date()関数を用います。lubridateパッケージもtidyverseに含まれていますが、ロードは同時にされませんので、パッケージの関数を利用することを明示しておきます。 fuk_temp %&gt;% pivot_longer(-年月, names_to = &quot;type&quot;, values_to = &quot;temp&quot;) %&gt;% mutate(年月 = lubridate::as_date(年月)) %&gt;% ggplot(aes(年月, temp, group = type, color = type)) + geom_line() + scale_x_date(labels = scales::date_format(&quot;%Y/%m&quot;)) + labs(title = &quot;福岡市の気温&quot;) "]]
