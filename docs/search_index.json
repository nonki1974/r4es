[["api01.html", "8 Webからのデータ取得（1）「e-Stat API」", " 8 Webからのデータ取得（1）「e-Stat API」 オープンデータとは以下の性質を持つデータ、あるいはその普及を目指す考え方のことを言います。 インターネット経由でダウンロードできる 再利用と再配布ができる 誰でも利用できる 使いやすく、変更可能な形式である 近年、この考え方に基づいて、様々なデータがインターネット上に公開されるようになりました。一方で、「使いやすく、変更可能な形式」という点においては、十分でないものも多いです。例えば、印刷されたデータをスキャンしたPDFファイルであれば、そのデータを利用したい場合には、利用者がエクセルなどに入力する必要があります。それがWordやExcelから変換されたものであったとしても、データ部分を抽出するには手間がかかってしまいます。一方、政府の統計データを公開しているe-Statにおいては、多くのエクセルファイルなどをダウンロードできるようになっていますが、印刷することを意識したレイアウトになっているものが多く、Rのデータフレームとして取り込むためには、無駄な部分を取り除いたり、列名を調整したりするなどの処理を手動で行う必要があります。 このような問題を解決できるのがApplication Programing Inteface（API）と呼ばれる仕組みです。APIを利用すると、あるプログラムやソフトウェア（ここでは、e-Statのデータを取得するためのプログラム）を外部のプログラム（ここではR）から呼び出して利用することができます。特に、利用したいプログラムやソフトウェアをインターネット経由で利用できるようになっている場合、そのAPIをWeb APIと呼ぶこともあります。APIを使うことで、例えば 独自のTwitterアプリを開発 独自のLINEのchatbotを開発 TwitterデータをRで直接取得 e-StatのデータをRで直接取得 などのことができるようになります。 "],["estatapi.html", "8.1 e-Stat API", " 8.1 e-Stat API ここでは、e-StatのAPI機能を使って、Rから直接e-Statのデータを取得する手順について紹介します。e-Stat APIでは、一部のデータを除き、e-Statで公開されている主要なデータを利用することができます。e-Stat APIで利用できるデータの一覧は以下のURLから確認できますので、データを探す際はこちらを参照するとよいでしょう。 https://www.e-stat.go.jp/stat-search/database e-StatのAPI機能を使うには、予めユーザー登録をしてアプリケーションIDを取得しておく必要があります。 e-Stat API機能 Rからe-Stat APIを使う際には、estatapiパッケージを利用します。初めて利用する場合は、インストールしておきます。 install.packages(&quot;estatapi&quot;) estatapiを利用するセッションでは、最初に library(estatapi) を実行しておきます。また、取得したアプリケーションIDは、estatapiパッケージの関数を呼び出すごとに用いますので、以下のように変数に入れておくとよいでしょう。 appId &lt;- &quot;取得したアプリケーションID&quot; 8.1.1 統計表の検索 e-Stat APIで利用可能な統計表を検索する場合はウェブサイトからの方が便利ですが、estatapiの関数でもestat_getStatsList()関数で検索できます。 search_result &lt;- estat_getStatsList(appId, &quot;チョコレート&quot;) 8.1.2 メタ情報の取得 指定した統計データに関する情報（データ本体ではなく、列名や変数のカテゴリに関する情報など）を取得するには、estat_getMetaInfo()関数を用います。ここでは、家計調査における品目分類ごとの支出額についてのデータを見てみましょう。データのIDは、前の表から、0003103532となっています。 metainfo_result &lt;- estat_getMetaInfo(appId, &quot;0003103532&quot;) 結果はリストで帰ってきますので、要素の一覧を確認します。 names(metainfo_result) ## [1] &quot;tab&quot; &quot;cat01&quot; &quot;cat02&quot; &quot;area&quot; &quot;time&quot; &quot;.names&quot; リストの要素ごとに中身を確認します。 metainfo_result$cat01 ## # A tibble: 703 x 5 ## `@code` `@name` `@level` `@unit` `@parentCode` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 000100000 世帯数分布（抽出率調整） 1 一万分比 &lt;NA&gt; ## 2 000200000 集計世帯数 1 世帯 &lt;NA&gt; ## 3 000300000 世帯人員 1 人 &lt;NA&gt; ## 4 000400000 18歳未満人員 2 人 000300000 ## 5 000500000 65歳以上人員 2 人 000300000 ## 6 000600000 65歳以上無職者人員 3 人 000500000 ## 7 000700000 有業人員 1 人 &lt;NA&gt; ## 8 000800000 世帯主の年齢 1 歳 &lt;NA&gt; ## 9 000900000 持家率 1 ％ &lt;NA&gt; ## 10 001000000 家賃・地代を支払っている世帯の割合 1 ％ &lt;NA&gt; ## # ... with 693 more rows metainfo_result$cat02 ## # A tibble: 4 x 3 ## `@code` `@name` `@level` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 03 二人以上の世帯（2000年） 1 ## 2 04 二人以上の世帯のうち勤労者世帯（2000年） 1 ## 3 01 二人以上の世帯（農林漁家世帯を除く）（1985年2007年,2017年） 1 ## 4 02 二人以上の世帯のうち勤労者世帯（農林漁家世帯を除く）（1985年2007年,2017年）~ 1 metainfo_result$tab ## # A tibble: 1 x 3 ## `@code` `@name` `@level` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 01 金額 &quot;&quot; metainfo_result$area ## # A tibble: 53 x 3 ## `@code` `@name` `@level` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 00000 全国 1 ## 2 01003 01100 札幌市 1 ## 3 02003 02201 青森市 1 ## 4 03003 03201 盛岡市 1 ## 5 04003 04100 仙台市 1 ## 6 05003 05201 秋田市 1 ## 7 06003 06201 山形市 1 ## 8 07003 07201 福島市 1 ## 9 08003 08201 水戸市 1 ## 10 09003 09201 宇都宮市 1 ## # ... with 43 more rows metainfo_result$time ## # A tibble: 420 x 3 ## `@code` `@name` `@level` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1985000101 1985年1月 1 ## 2 1985000202 1985年2月 1 ## 3 1985000303 1985年3月 1 ## 4 1985000404 1985年4月 1 ## 5 1985000505 1985年5月 1 ## 6 1985000606 1985年6月 1 ## 7 1985000707 1985年7月 1 ## 8 1985000808 1985年8月 1 ## 9 1985000909 1985年9月 1 ## 10 1985001010 1985年10月 1 ## # ... with 410 more rows 分類品目において、「チョコレート」を含む分類を確認します。 metainfo_result$cat01 %&gt;% filter(str_detect(`@name`, &quot;チョコレート&quot;)) ## # A tibble: 2 x 5 ## `@code` `@name` `@level` `@unit` `@parentCode` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 010800130 352 チョコレート 5 円 010800000 ## 2 010800140 353 チョコレート菓子 5 円 010800000 8.1.3 統計データの取得 ここでは、チョコレート（010800130）の月別支出金額を見てみましょう。cdArea = \"00000\"は「全国」、cdCat01 = \"02\"は「2人以上の世帯」を指定しています。 choco &lt;- estat_getStatsData(appId, &quot;0003103532&quot;, cdArea = &quot;00000&quot;, cdCat01 = &quot;010800130&quot;, cdCat02 = &quot;03&quot;) ## Fetching record 1-240... (total: 240 records) このデータを使って、月別支出金額の折れ線グラフを作成してみます。 choco %&gt;% mutate(time = paste0(`時間軸（月次）`, &quot;1日&quot;)) %&gt;% mutate(time = lubridate::ymd(time)) %&gt;% ggplot(aes(time, value, group = 1)) + geom_line() + theme_minimal() 年毎の折れ線グラフを重ねて描画するには以下のようにします。 choco %&gt;% mutate(time = paste0(`時間軸（月次）`, &quot;1日&quot;)) %&gt;% mutate(time = lubridate::ymd(time)) %&gt;% mutate(year = lubridate::year(time)) %&gt;% mutate(month = lubridate::month(time)) %&gt;% ggplot(aes(month, value, group = year, color = factor(year))) + geom_line() + theme_minimal() + scale_x_continuous(breaks = 1:12) "],["aging-population.html", "8.2 【例1】少子高齢化の可視化", " 8.2 【例1】少子高齢化の可視化 e-Statのデータを用いて、少子高齢化の推移を可視化してみます。キーワード「人口」で検索して、「社会・人口統計体系」「都道府県データ」「年度次」 と辿り「Ａ 人口・世帯」の「API」をクリックするとデータのIDが0000010101であることが分かります。 メタデータを取得してデータの概要を確認します。 metainfo_result &lt;- estat_getMetaInfo(appId, &quot;0000010101&quot;) names(metainfo_result) ## [1] &quot;tab&quot; &quot;cat01&quot; &quot;area&quot; &quot;time&quot; &quot;.names&quot; head(metainfo_result$cat01) ## # A tibble: 6 x 4 ## `@code` `@name` `@level` `@unit` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 A1101 A1101_総人口 1 人 ## 2 A110101 A110101_総人口（男） 1 人 ## 3 A110102 A110102_総人口（女） 1 人 ## 4 A1102 A1102_日本人人口 1 人 ## 5 A110201 A110201_日本人人口（男） 1 人 ## 6 A110202 A110202_日本人人口（女） 1 人 metainfo_result$cat01 %&gt;% filter(`@code` &gt;= &quot;A1301&quot;, `@code` &lt;= &quot;A1303&quot;) ## # A tibble: 7 x 4 ## `@code` `@name` `@level` `@unit` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 A1301 A1301_15歳未満人口 1 人 ## 2 A130101 A130101_15歳未満人口（男） 1 人 ## 3 A130102 A130102_15歳未満人口（女） 1 人 ## 4 A1302 A1302_1564歳人口 1 人 ## 5 A130201 A130201_1564歳人口（男） 1 人 ## 6 A130202 A130202_1564歳人口（女） 1 人 ## 7 A1303 A1303_65歳以上人口 1 人 metainfo_result$area ## # A tibble: 48 x 3 ## `@code` `@name` `@level` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 00000 全国 1 ## 2 01000 北海道 2 ## 3 02000 青森県 2 ## 4 03000 岩手県 2 ## 5 04000 宮城県 2 ## 6 05000 秋田県 2 ## 7 06000 山形県 2 ## 8 07000 福島県 2 ## 9 08000 茨城県 2 ## 10 09000 栃木県 2 ## # ... with 38 more rows 以上の情報から、以下のようにデータを取得します。cdCat01From = \"A1301\"とcdCat01To = \"A1303\"によって、「15歳未満」から「65歳以上」の集計カテゴリを取得するようにしています。cdArea = \"00000\"は「全国」を指定しています。 population &lt;- estat_getStatsData( appId, &quot;0000010101&quot;, cdCat01From = &quot;A1301&quot;, cdCat01To = &quot;A1303&quot;, cdArea = &quot;00000&quot; ) ## Fetching record 1-308... (total: 308 records) このデータから、積み上げ縦棒グラフを作成します。 population %&gt;% filter(str_length(cat01_code) == 5) %&gt;% ggplot(aes(調査年, value, fill = `Ａ 人口・世帯`)) + geom_bar(stat = &quot;identity&quot;) 見栄えを以下のように修正します。 年齢区分の表示「A1301_１５歳未満人口」「15歳未満」 調査年の表示：切れのいい数字のみ（日付型に変換） 人口の目盛：指数表示千人単位の通常表示 テーマ：minimal y軸ラベルの設定：「value」「人口[千人]」 population %&gt;% filter(str_length(cat01_code) == 5) %&gt;% separate(`Ａ 人口・世帯`, c(&quot;code&quot;, &quot;年齢区分&quot;), sep = &quot;_&quot;) %&gt;% mutate(code = order(code, decreasing = TRUE)) %&gt;% mutate(年齢区分 = stringi::stri_trans_nfkc(年齢区分)) %&gt;% mutate(年齢区分 = str_remove(年齢区分, &quot;人口&quot;)) %&gt;% mutate(年齢区分 = fct_reorder(年齢区分, code)) %&gt;% mutate(調査年 = str_remove(調査年, &quot;年度&quot;)) %&gt;% mutate(調査年 = lubridate::ymd(調査年, truncated = 2)) %&gt;% mutate(value = value / 1000) %&gt;% ggplot(aes(調査年, value, fill = 年齢区分)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.8) + theme_minimal(base_size = 16) + theme(legend.position = &quot;bottom&quot;) + scale_y_continuous(name = &quot;人口[千人]&quot;, labels = scales::comma) 続いて、65歳以上の人口と15歳未満の人口の比を取った「老年化指数」を計算し、折れ線グラフで指数の推移を可視化してみます。 population %&gt;% filter(str_length(cat01_code) == 5) %&gt;% select(-`Ａ 人口・世帯`) %&gt;% pivot_wider(names_from = cat01_code, values_from = value) %&gt;% mutate(老年化指数 = A1303 / A1301) %&gt;% mutate(調査年 = str_remove(調査年, &quot;年度&quot;)) %&gt;% mutate(調査年 = lubridate::ymd(調査年, truncated = 2)) %&gt;% ggplot(aes(調査年, 老年化指数)) + geom_area(alpha = 0.6) + geom_point(size = 2) + geom_line(size = 1) + theme_minimal(base_size = 16) + labs(title = &quot;老年化指数の推移&quot;, caption = &quot;出典：都道府県・市区町村のすがた（社会・人口統計体系）&quot;) "],["recycle.html", "8.3 【例2】リサイクル率の推移の可視化", " 8.3 【例2】リサイクル率の推移の可視化 ここでは、都道府県別のリサイクル率を可視化してみます。データベースから「リサイクル率」で検索すると「社会・人口統計体系」の「都道府県データ」がヒットしますので、これを用います。データIDは0000010108となります。 estat_getMetaInfo(appId, statsDataId = &quot;0000010108&quot;)$cat01 %&gt;% filter(str_detect(`@name`, &quot;リサイクル率&quot;)) ## # A tibble: 1 x 4 ## `@code` `@name` `@level` `@unit` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 H5614 H5614_ごみのリサイクル率 1 ％ rr &lt;- estat_getStatsData(appId, statsDataId = &quot;0000010108&quot;, cdCat01 = &quot;H5614&quot;) %&gt;% filter(地域 != &quot;全国&quot;) ## Fetching record 1-912... (total: 912 records) head(rr) ## # A tibble: 6 x 11 ## tab_code 観測値 cat01_code `Ｈ 居住` area_code 地域 time_code 調査年 unit ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 19991000~ 1999年~ ％ ## 2 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 20001000~ 2000年~ ％ ## 3 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 20011000~ 2001年~ ％ ## 4 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 20021000~ 2002年~ ％ ## 5 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 20031000~ 2003年~ ％ ## 6 00001 観測値 H5614 H5614_ごみの~ 01000 北海道~ 20041000~ 2004年~ ％ ## # ... with 2 more variables: value &lt;dbl&gt;, annotation &lt;chr&gt; rr %&gt;% separate(調査年, &quot;year&quot;, sep = 4, convert = TRUE) %&gt;% ggplot(aes(year, value, group = 地域, color = 地域)) + geom_line() + theme_minimal() + labs(x = &quot;調査年&quot;, y = &quot;リサイクル率[%]&quot;, title = &quot;都道府県別リサイクル率の推移&quot;, caption = &quot;出典：都道府県・市区町村のすがた（社会・人口統計体系）&quot;) グラフから、全体としてリサイクル率が向上していることは分かりますが、線が多すぎて詳細がよく分かりません。プレゼンテーション用にグラフを加工してみます。グラフの表示方法でよく用いられるテクニックが「ハイライト」です。ここでは、最新の集計年での順位に基づき、1位と最下位、および福岡県をハイライトします。ggplot2のグラフでハイライトを行うには、gghighlightパッケージを用います。初めて使う場合は、インストールとセッション開始時のロードを行っておきます。 install.packages(&quot;gghighlight&quot;) library(gghighlight) gghighlightパッケージで利用できるgghighlight()関数でfilter()関数と同様の書式で、ハイライトしたいデータを抽出する式を記述することで、該当するデータのハイライトができるようになります。例えばmpgデータの場合に、midsizeのクラスだけハイライトするには以下のようにします。 ggplot(mpg, aes(class)) + geom_bar() + gghighlight(class == &quot;midsize&quot;, use_group_by = FALSE) ## label_key: class 2017年度のリサイクル率の順位に基づいてハイライトするため、2017年度のリサイクル率の順位を計算しておきます。 order2017 &lt;- filter(rr, 調査年 == &quot;2017年度&quot;) %&gt;% mutate(order = min_rank(value)) %&gt;% select(地域, order) head(order2017) ## # A tibble: 6 x 2 ## 地域 order ## &lt;chr&gt; &lt;int&gt; ## 1 北海道 41 ## 2 青森県 6 ## 3 岩手県 23 ## 4 宮城県 14 ## 5 秋田県 10 ## 6 山形県 5 これをリサイクル率のデータと結合して、リサイクル率が1位、47位および福岡県のデータをハイライトさせます。 rr %&gt;% left_join(order2017) %&gt;% separate(調査年, &quot;year&quot;, sep = 4, convert = TRUE) %&gt;% ggplot(aes(year, value, group = 地域, color = 地域)) + geom_line() + gghighlight(order %in% c(1, 47) | 地域 == &quot;福岡県&quot;, use_group_by = FALSE, label_params = list(direction = &quot;y&quot;)) + theme_minimal() + labs(x = &quot;調査年&quot;, y = &quot;リサイクル率[%]&quot;, title = &quot;都道府県別リサイクル率の推移&quot;, caption = &quot;出典：都道府県・市区町村のすがた（社会・人口統計体系）&quot;) ## Joining, by = &quot;地域&quot; ## label_key: 地域 "]]
